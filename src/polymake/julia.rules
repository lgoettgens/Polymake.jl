# polymake helper functions returning various information for julia


# list completions for property names for a given BigObject
# (does not show any user_methods!)
function complete_property($$) {
   my ($po,$prefix) = @_;
   return new Array<String>(Core::Shell::Completion::try_property_completion($po->type,$prefix));
}

# all loaded applications
function list_applications() {
   return new Array<String>(map { $_->name }Polymake::Core::Application::list_loaded());
}

# polymake shell startup applications
function startup_applications() {
   return new Array<String>(@User::start_applications)
}

# list all big objects in given application
function list_big_objects($) {
   my ($app) = @_;
   return new Array<String>(uniq(map {$_->full_name} grep {!defined($_->generic) } @{User::application($app)->object_types}));
}

# list labels for preferences in given application
function list_labels($) {
   my ($app) = @_;
   return new Array<String>(keys(%{User::application($app)->prefs->labels}));
}

# map some perl based types without typeinfo to c++ types
function classify_perl_pv($) {
   my ($pv) = @_;
   return "pm::perl::BigObject"
      if instanceof Polymake::Core::BigObject($pv);
   return "pm::perl::BigObjectType"
      if instanceof Polymake::Core::BigObjectType($pv);
   return "pm::Array<pm::perl::BigObject>"
      if instanceof Polymake::Core::BigObjectArray($pv);
   # a plain perl string is also done here
   return "std::string"
      if is_string($pv);
   # ref will return some string representation of the perl object type
   return ref($pv);
}

function is_boolean_wrapper($) {
   my($c) = @_;
   return is_boolean($c);
}

# helper function for converting `nothing`
function get_undef() {
   return undef;
}

function jupyter_visual_threejs(Visual::Object+) {
   my $string = "";
   local $ThreeJS::is_used_in_jupyter=1;
   open my $handle, ">", \$string;
   threejs(@_,File=>$handle);
   close $handle;
   state $id = 0;
   $string =~ s/OUTPUTID/$id/gm;
   $id++;
   return $string;
}

function jupyter_visual_svg(Visual::Object+) {
   die "polymake svg.rules disabled: perl module SVG probably missing"
      unless User::application("common")->configured->{"svg.rules"} > 0;
   my $string = "";
   open my $handle, ">", \$string;
   svg(@_,File=>$handle);
   close $handle;
   return $string;
}

function deserialize_json_string($) {
   my ($str) = @_;
   my $hash = decode_json($str);
   return Core::Serializer::deserialize($hash);
}

function safe_to_string($) {
   my ($var) = @_;
   return "$var";
}

function get_bigobject_elemtype($) {
   my $params = $_[0]->type->params;
   return "" unless defined($params) && @$params > 0;
   if ($params->[0]->name =~ /^Min|Max$/) {
      return $params->[1]->name;
   } else {
      return $params->[0]->name;
   }
}

function get_bigobject_qualified_name($) {
   return $_[0]->type->qualified_name;
}

function nodemap_as_array<Dir,Elem>(NodeMap<Dir,Elem>) {
   my ($nm) = @_;
   return new Array<Elem>($nm);
}

function permute_graph($$) {
   my ($g, $p) = @_;
   $g->permute_nodes($p);
}

function as_perl_array($) {
   return [@{$_[0]}];
}

function as_perl_array_of_array($) {
   return [map {[@$_]} @{$_[0]}];
}

function bigobject_prop_type($$) {
   my ($bot, $path) = @_;
   while (my ($parent, $elem) = $path =~ /^([^\.]*)\.(.*)$/) {
      my $prop = $bot->lookup_property($parent);
      $bot = $prop->subobject_type();
      return "" unless defined($bot);
      $path = $elem;
   }
   my $t = $bot->lookup_property($path)->type;
   return instanceof Core::BigObjectType($t) ? $t->pure_type->name : $t->name;
}

package Polymake::User;

function get_shell_scalar($) {
   my ($varname) = @_;
   no strict 'refs';
   return ${"Polymake::User::$varname"};
}

function set_shell_scalar($,$) {
   my ($varname, $obj) = @_;
   # redeclaring an existing variable will fail but we can just ignore that
   eval "declare \$$varname;";
   no strict 'refs';
   ${"Polymake::User::$varname"} = $obj;
}
